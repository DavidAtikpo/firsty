// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MERCHANT
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  merchantProfile Merchant?
  orders          Order[]
  
  @@index([email])
}

model Merchant {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  affiliateCode   String    @unique
  commissionRate  Float     @default(10.0) // Pourcentage de commission
  totalEarnings   Float     @default(0)
  pendingEarnings Float     @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  referrals       Order[]
  commissions     Commission[]
  
  @@index([affiliateCode])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  price       Float
  image       String?
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  
  @@index([isActive])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  
  customerId      String
  customer        User        @relation(fields: [customerId], references: [id])
  
  merchantId      String?
  merchant        Merchant?   @relation(fields: [merchantId], references: [id])
  
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  
  customerName    String
  customerEmail   String
  shippingAddress String      @db.Text
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  items           OrderItem[]
  commission      Commission?
  
  @@index([customerId])
  @@index([merchantId])
  @@index([orderNumber])
}

model OrderItem {
  id        String   @id @default(cuid())
  
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Float    // Prix au moment de l'achat
  
  createdAt DateTime @default(now())
  
  @@index([orderId])
  @@index([productId])
}

model Commission {
  id              String    @id @default(cuid())
  
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  merchantId      String
  merchant        Merchant  @relation(fields: [merchantId], references: [id])
  
  amount          Float
  commissionRate  Float     // Taux de commission au moment de la vente
  isPaid          Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  paidAt          DateTime?
  
  @@index([merchantId])
  @@index([isPaid])
}
